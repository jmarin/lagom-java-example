play.modules.enabled += cinnamon.lagom.impl.HelloModule
//play.modules.enabled += "com.lightbend.rp.servicediscovery.lagom.javadsl.ServiceLocatorModule"


hello.cassandra.keyspace = hello

cassandra-journal.keyspace = ${hello.cassandra.keyspace}
cassandra-snapshot-store.keyspace = ${hello.cassandra.keyspace}
lagom.persistence.read-side.cassandra.keyspace = ${hello.cassandra.keyspace}

# The properties below override Lagom default configuration with the recommended values for new projects.
#
# Lagom has not yet made these settings the defaults for backward-compatibility reasons.

# Prefer 'ddata' over 'persistence' to share cluster sharding state for new projects.
# See https://doc.akka.io/docs/akka/current/cluster-sharding.html#distributed-data-vs-persistence-mode
akka.cluster.sharding.state-store-mode = ddata

akka.cluster.seed-nodes = [
  "akka.tcp://application@127.0.1.1:2552"
]

# Enable the serializer provided in Akka 2.5.8+ for akka.Done and other internal
# messages to avoid the use of Java serialization.
akka.actor.serialization-bindings {
  "akka.Done"                 = akka-misc
  "akka.actor.Address"        = akka-misc
  "akka.remote.UniqueAddress" = akka-misc
}

lagom.circuit-breaker.default.max-failures = 10

lagom.services {
  // Only needed to allow the sample to run from test and dist with the config Service Locator
  hello  = "http://localhost:9000"
  cas_native = "tcp://127.0.0.1:9042"
}

lagom.spi.circuit-breaker-metrics-class = "cinnamon.lagom.CircuitBreakerInstrumentation"

cinnamon {

  application = "lagom-java-example"

  //chmetrics.reporters += "console-reporter"
  prometheus {
    exporters += http-server
  }

  akka.actors {
    default-by-class {
      includes = "/user/*"
      report-by = class
      excludes = ["akka.http.*", "akka.stream.*"]
    }
  }

  lagom.http {
    servers {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
    clients {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
  }
}
